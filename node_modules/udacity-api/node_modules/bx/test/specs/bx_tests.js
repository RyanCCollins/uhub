var expect = require('chai').expect;
var box = require('../../lib/bx');

describe('bx: tests', function() {
    describe('no schema', function() {
        var stuff = new box();

        it('should have a length of 0', function() {
            expect(stuff.len()).to.equal(0);
        });

        it('should have no schema and not be in debug mode', function() {
            expect(stuff.opts.debug).to.equal(false);
            expect(stuff.opts.schema).to.equal(undefined);
        });

        it('should have no data', function() {
            expect(stuff.data).to.eql({});
        });

        it('should insert data with no timeout', function() {
            stuff.put('name', 'Bob');
            expect(stuff.get('name')).to.equal('Bob');
            expect(stuff.data.name._exp).to.equal(undefined);
        });

        it('should check that the data object is correct', function() {
            expect(stuff.all()).to.eql({
                name: 'Bob'
            });
        });

        it('should check that there is an undefined exp time for name', function() {
            expect(stuff.exp('name')).to.equal(undefined);
        });

        it('should modify stuff.data.name to equal Ty', function() {
            stuff.put('name', 'Ty');
            expect(stuff.get('name')).to.equal('Ty');
        });

        it('should delete stuff.data.name and have an empty object', function() {
            stuff.del('name');
            expect(stuff.all()).to.eql({});
        });

        it('should add a bunch of items and check that the data object is correct', function() {
            for (var i = 1; i < 3; i++) {
                stuff.put(i, i);
            }
            expect(stuff.all()).to.eql({
                1: 1,
                2: 2
            });
        });

        it('should delete one key and verify the data object', function() {
            stuff.del('0');
            expect(stuff.all()).to.eql({
                1: 1,
                2: 2
            });
        });

        it('should have a length of 2', function() {
            expect(stuff.len()).to.equal(2);
        });

        it('should have keys of [1, 2]', function() {
            expect(stuff.keys()).to.eql(['1', '2']);
        });

        it('should have the correct object for mget', function() {
            expect(stuff.mget(['1', '2'])).to.eql({
                1: 1,
                2: 2
            });
        });

        it('should mdel the two keys', function() {
            stuff.mdel(['1', '2']);
            expect(stuff.all()).to.eql({});
        });

        it('should clear the data object', function() {
            stuff.clear();
            expect(stuff.all()).to.eql({});
        });

        it('should have no keys and 0 length', function() {
            expect(stuff.keys()).to.eql([]);
        });
    });

    describe('with schema', function() {
        var studentSchema = {
            'title': 'students',
            'type': 'object',
            'required': ['name', 'major', 'gpa'],
            'properties': {
                'name': {
                    'type': 'string'
                },
                'major': {
                    'type': 'string'
                },
                'gpa': {
                    'type': 'number'
                }
            }
        };

        var me = {
            name: "Ty",
            major: "Computer Science",
            gpa: -500
        };

        var students = new box({
            schema: studentSchema
        });

        it('should have a length of 0', function() {
            expect(students.len()).to.equal(0);
        });

        it('should have a schema and not be in debug mode', function() {
            expect(students.opts.debug).to.equal(false);
            expect(students.opts.schema).to.eql(studentSchema);
        });

        it('should have no data', function() {
            expect(students.data).to.eql({});
        });

        it('should return false if "fits" is called using malformed data', function() {
            expect(students.check('bad data')).to.equal(false);
            expect(students.check(me)).to.equal(true);
        });

        it('should fail to insert malformed data', function() {
            expect(function() {
                students.put('bad', 'data');
            }).to.throw(Error);
        });

        it('should still have length of 0 and no keys', function() {
            expect(students.len()).to.equal(0);
            expect(students.keys()).to.eql([]);
        });

        it('should insert data that fits the schema', function() {
            students.put('0', me);
            expect(students.get('0')).to.eql(me);
        });

        it('should have a length of 1 and one key', function() {
            expect(students.len()).to.equal(1);
            expect(students.keys()).to.eql(['0']);
            expect(students.vals()).to.eql([me]);
        });

        it('should clear the data object', function() {
            students.clear();
            expect(students.all()).to.eql({});
        });
    });

    describe('no schema timeout tests', function() {
        var timebomb = new box();

        it('should have a length of 0', function() {
            expect(timebomb.len()).to.equal(0);
        });

        it('should have a schema and not be in debug mode', function() {
            expect(timebomb.opts.debug).to.equal(false);
            expect(timebomb.opts.schema).to.equal(undefined);
        });

        it('should have no data', function() {
            expect(timebomb.data).to.eql({});
            expect(timebomb.all()).to.eql({});
            expect(timebomb.vals()).to.eql([]);
        });

        it('should insert data with a 5 second timeout', function(done) {
            timebomb.put('salary', 10000, 5000);
            setTimeout(function() {
                expect(timebomb.get('salary')).to.equal(10000);
                expect(timebomb.mget(['salary'])).to.eql({
                    salary: 10000
                });
                expect(timebomb.exp('salary')).to.be.a('number');
                done();
            }, 2000);
        });

        it('should fail to get the data after 5 seconds', function(done) {
            setTimeout(function() {
                expect(timebomb.get('salary')).to.equal(undefined);
                done();
            }, 5500);
        });

        it('expect the data object to be empty', function() {
            expect(timebomb.all()).to.eql({});
        });
    });
});
