var tv = require('tv4');

/**
* Update an object with new keys/values from another object
*
* @param {object} defaults
* @param {object} options
*/
var merge = function(defaults, options) {
    var obj = defaults || {};
    if (options && typeof options === 'object') {
        var keys = Object.keys(options);
        for (var i = 0, len = keys.length; i < len; i++) {
            var k = keys[i];
            if (options[k] !== undefined) {
                obj[k] = options[k];
            }
        }
    }
    return obj;
};

/**
* Create a new data store.
*
* @param {object=} opts - Specify console output and schema
*/
var Bx = function(opts) {
    var defaults = {
        schema: undefined,
        debug: false
    };

    if (opts) {
        if (opts.debug && typeof opts.debug !== 'boolean') throw new Error('debug must be true or false');

        if (opts.debug) {
            console.log('data store created');
        }

        this.opts = merge(defaults, opts);
    } else {
        this.opts = defaults;
    }


    this.data = {};

    this.credits = [
        '\033[95m',
        '              __            ',
        '       ___~~~`  `~~__       ',
        ' ___~~~              `~_    ',
        '|~_                     `~_ ',
        '|  ~_               ___ ~~ |',
        '|    ~_        __~~~       |',
        '|      ~_ __~~~            |',
        '|        |                 |',
        '|        |                 |',
        '|        |                 |',
        '|        |       bx        |',
        '~_       |                 |',
        '  ~_     |               __|',
        '    ~_   |          __~~~   ',
        '      ~_ |     __~~~        ',
        '        ~|__~~~             ',
        '                            ',
        '(c) 2014 tylucaskelley      ',
        '\033[0m'
    ].join('\n');
};

/**
* Add an object to the data store and specify how long it will live.
*
* @param {string} key
* @param {?} val
* @param {number=} time - Time in ms before auto-deletion
*/
Bx.prototype.put = function(key, val, time) {
    if (this.opts.schema && !tv.validate(val, this.opts.schema)) {
        throw new Error(val + ' does not fit the schema');
    }

    if (this.opts.debug) {
        console.log('PUT: key = ' + key + ', value = ' + JSON.stringify(val));
    }

    var death;
    if(typeof time === 'number' && time > 0) {
        if (this.opts.debug) {
            console.log('"' + key + '"' + ' will be deleted in ' + time + ' ms.');
        }
        death = time + (new Date()).getTime();
    }

    var item = {
        value: val,
        _exp: death
    };

    if(this._exp) {
        var self = this;
        setTimeout(function() {
            self.del(key);
        }, time);
    }

    this.data[key] = item;
};

/**
* Checks to see if the data fits the schema
*
* @param {?} data - Data to validate
*/
Bx.prototype.check = function(data) {
    if (this.opts.schema) {
        if (tv.validate(data, this.opts.schema)) {
            return true;
        }

        return false;
    } else {
        return true;
    }
};

/**
* Retrieve data from the data store if the key exists.
*
* @param {string} key
*/
Bx.prototype.get = function(key) {
    if (this.opts.debug) {
        console.log('GET: key = ' + key);
    }

    var data = this.data[key];

    if (data) {
        if (!data._exp || (typeof data._exp === 'number' && data._exp >= (new Date()).getTime())) {
            return data.value;
        } else {
            if (this.opts.debug) {
                console.log('EXPIRED: key = ' + key);
            }
            this.del(key);
        }
    }
};

/**
* Get multiple values from the data store.
*
* @param {Array} keys
*/
Bx.prototype.mget = function(keys) {
    var all = {};
    for (var i in keys) {
        var data = this.get(keys[i]);
        if (data !== undefined) {
            all[keys[i]] = data;
        }
    }
    return all;
};

/**
* Delete a key from the data store.
*
* @param {string} key
*/
Bx.prototype.del = function(key) {
    if (this.opts.debug) {
        console.log('DELETE: key = ' + key);
    }
    delete this.data[key];
};

/**
* Delete keys from the data store.
*
* @param {Array} keys
*/
Bx.prototype.mdel = function(keys) {
    for (var i in keys) {
        this.del(keys[i]);
    }
};

/**
* Clear the data store.
*/
Bx.prototype.clear = function() {
    if (this.opts.debug) {
        console.log('DELETE: all data');
    }
    this.data = {};
};

/**
* Get entire data store.
*/
Bx.prototype.all = function() {
    if (this.opts.debug) {
        console.log('GET: all data');
    }

    var data = {};

    for (var key in this.data) {
        var val = this.get(key);
        if (val) {
            data[key] = val;
        }
    }

    return data;
};

/**
* Get an array of the keys in the data store.
*/
Bx.prototype.keys = function() {
    return Object.keys(this.data);
};

/**
* Get an array of the values in the data store.
*/
Bx.prototype.vals = function() {
    var data = this.data;
    var vals = [];
    for (var key in data) {
        if (this.get(key) !== undefined) {
            vals.push(this.get(key));
        }
    }
    return vals;
};

/**
* Get the number of items stored.
*/
Bx.prototype.len = function() {
    return Object.keys(this.data).length;
};

/**
* Get the length in bytes of the data store.
*/
Bx.prototype.size = function() {
    return new Buffer(JSON.stringify(this.data), "utf-8").length;
};

/**
* Get the time of deletion for a key.
*
* @param {string} key
*/
Bx.prototype.exp = function(key) {
    return this.data[key]._exp;
};

module.exports = Bx;
